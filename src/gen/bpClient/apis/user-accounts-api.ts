/* tslint:disable */
/* eslint-disable */
/**
 * BPartners API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: latest
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { Account } from '../models';
import { AccountHolder } from '../models';
import { BadRequestException } from '../models';
import { BusinessActivity } from '../models';
import { CompanyBusinessActivity } from '../models';
import { CompanyInfo } from '../models';
import { InternalServerException } from '../models';
import { NotAuthorizedException } from '../models';
import { Page } from '../models';
import { PageSize } from '../models';
import { ResourceNotFoundException } from '../models';
import { TooManyRequestsException } from '../models';
import { User } from '../models';
/**
 * UserAccountsApi - axios parameter creator
 * @export
 */
export const UserAccountsApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Get accountHolders of an account
     * @param {string} userId
     * @param {string} accountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAccountHolders: async (userId: string, accountId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      if (userId === null || userId === undefined) {
        throw new RequiredError('userId', 'Required parameter userId was null or undefined when calling getAccountHolders.');
      }
      // verify required parameter 'accountId' is not null or undefined
      if (accountId === null || accountId === undefined) {
        throw new RequiredError('accountId', 'Required parameter accountId was null or undefined when calling getAccountHolders.');
      }
      const localVarPath = `/users/{userId}/accounts/{accountId}/accountHolders`
        .replace(`{${'userId'}}`, encodeURIComponent(String(userId)))
        .replace(`{${'accountId'}}`, encodeURIComponent(String(accountId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get accounts of a user
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAccountsByUserId: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling getAccountsByUserId.');
      }
      const localVarPath = `/users/{id}/accounts`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get all business activities pre-inserted by admin.
     * @param {Page} [page]
     * @param {PageSize} [pageSize]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBusinessActivities: async (page?: Page, pageSize?: PageSize, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/businessActivities`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required

      if (page !== undefined) {
        localVarQueryParameter['page'] = page;
      }

      if (pageSize !== undefined) {
        localVarQueryParameter['pageSize'] = pageSize;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get a user
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling getUserById.');
      }
      const localVarPath = `/users/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update business activities of an account holder
     * @param {string} userId
     * @param {string} accountId
     * @param {string} ahId
     * @param {CompanyBusinessActivity} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBusinessActivities: async (
      userId: string,
      accountId: string,
      ahId: string,
      body?: CompanyBusinessActivity,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      if (userId === null || userId === undefined) {
        throw new RequiredError('userId', 'Required parameter userId was null or undefined when calling updateBusinessActivities.');
      }
      // verify required parameter 'accountId' is not null or undefined
      if (accountId === null || accountId === undefined) {
        throw new RequiredError('accountId', 'Required parameter accountId was null or undefined when calling updateBusinessActivities.');
      }
      // verify required parameter 'ahId' is not null or undefined
      if (ahId === null || ahId === undefined) {
        throw new RequiredError('ahId', 'Required parameter ahId was null or undefined when calling updateBusinessActivities.');
      }
      const localVarPath = `/users/{userId}/accounts/{accountId}/accountHolders/{ahId}/businessActivities`
        .replace(`{${'userId'}}`, encodeURIComponent(String(userId)))
        .replace(`{${'accountId'}}`, encodeURIComponent(String(accountId)))
        .replace(`{${'ahId'}}`, encodeURIComponent(String(ahId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required

      localVarHeaderParameter['Content-Type'] = 'application/json';

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      const needsSerialization = typeof body !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : body || '';

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update company info of an account holder
     * @param {string} userId
     * @param {string} accountId
     * @param {string} ahId
     * @param {CompanyInfo} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCompanyInfo: async (userId: string, accountId: string, ahId: string, body?: CompanyInfo, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      if (userId === null || userId === undefined) {
        throw new RequiredError('userId', 'Required parameter userId was null or undefined when calling updateCompanyInfo.');
      }
      // verify required parameter 'accountId' is not null or undefined
      if (accountId === null || accountId === undefined) {
        throw new RequiredError('accountId', 'Required parameter accountId was null or undefined when calling updateCompanyInfo.');
      }
      // verify required parameter 'ahId' is not null or undefined
      if (ahId === null || ahId === undefined) {
        throw new RequiredError('ahId', 'Required parameter ahId was null or undefined when calling updateCompanyInfo.');
      }
      const localVarPath = `/users/{userId}/accounts/{accountId}/accountHolders/{ahId}/companyInfo`
        .replace(`{${'userId'}}`, encodeURIComponent(String(userId)))
        .replace(`{${'accountId'}}`, encodeURIComponent(String(accountId)))
        .replace(`{${'ahId'}}`, encodeURIComponent(String(ahId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required

      localVarHeaderParameter['Content-Type'] = 'application/json';

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      const needsSerialization = typeof body !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : body || '';

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * UserAccountsApi - functional programming interface
 * @export
 */
export const UserAccountsApiFp = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Get accountHolders of an account
     * @param {string} userId
     * @param {string} accountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAccountHolders(
      userId: string,
      accountId: string,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<AccountHolder>>>> {
      const localVarAxiosArgs = await UserAccountsApiAxiosParamCreator(configuration).getAccountHolders(userId, accountId, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Get accounts of a user
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAccountsByUserId(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Account>>>> {
      const localVarAxiosArgs = await UserAccountsApiAxiosParamCreator(configuration).getAccountsByUserId(id, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Get all business activities pre-inserted by admin.
     * @param {Page} [page]
     * @param {PageSize} [pageSize]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getBusinessActivities(
      page?: Page,
      pageSize?: PageSize,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<BusinessActivity>>>> {
      const localVarAxiosArgs = await UserAccountsApiAxiosParamCreator(configuration).getBusinessActivities(page, pageSize, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Get a user
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUserById(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<User>>> {
      const localVarAxiosArgs = await UserAccountsApiAxiosParamCreator(configuration).getUserById(id, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Update business activities of an account holder
     * @param {string} userId
     * @param {string} accountId
     * @param {string} ahId
     * @param {CompanyBusinessActivity} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateBusinessActivities(
      userId: string,
      accountId: string,
      ahId: string,
      body?: CompanyBusinessActivity,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AccountHolder>>> {
      const localVarAxiosArgs = await UserAccountsApiAxiosParamCreator(configuration).updateBusinessActivities(userId, accountId, ahId, body, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Update company info of an account holder
     * @param {string} userId
     * @param {string} accountId
     * @param {string} ahId
     * @param {CompanyInfo} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateCompanyInfo(
      userId: string,
      accountId: string,
      ahId: string,
      body?: CompanyInfo,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AccountHolder>>> {
      const localVarAxiosArgs = await UserAccountsApiAxiosParamCreator(configuration).updateCompanyInfo(userId, accountId, ahId, body, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * UserAccountsApi - factory interface
 * @export
 */
export const UserAccountsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  return {
    /**
     *
     * @summary Get accountHolders of an account
     * @param {string} userId
     * @param {string} accountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAccountHolders(userId: string, accountId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<AccountHolder>>> {
      return UserAccountsApiFp(configuration)
        .getAccountHolders(userId, accountId, options)
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @summary Get accounts of a user
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAccountsByUserId(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Account>>> {
      return UserAccountsApiFp(configuration)
        .getAccountsByUserId(id, options)
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @summary Get all business activities pre-inserted by admin.
     * @param {Page} [page]
     * @param {PageSize} [pageSize]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getBusinessActivities(page?: Page, pageSize?: PageSize, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<BusinessActivity>>> {
      return UserAccountsApiFp(configuration)
        .getBusinessActivities(page, pageSize, options)
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @summary Get a user
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUserById(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<User>> {
      return UserAccountsApiFp(configuration)
        .getUserById(id, options)
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @summary Update business activities of an account holder
     * @param {string} userId
     * @param {string} accountId
     * @param {string} ahId
     * @param {CompanyBusinessActivity} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateBusinessActivities(
      userId: string,
      accountId: string,
      ahId: string,
      body?: CompanyBusinessActivity,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<AccountHolder>> {
      return UserAccountsApiFp(configuration)
        .updateBusinessActivities(userId, accountId, ahId, body, options)
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @summary Update company info of an account holder
     * @param {string} userId
     * @param {string} accountId
     * @param {string} ahId
     * @param {CompanyInfo} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateCompanyInfo(
      userId: string,
      accountId: string,
      ahId: string,
      body?: CompanyInfo,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<AccountHolder>> {
      return UserAccountsApiFp(configuration)
        .updateCompanyInfo(userId, accountId, ahId, body, options)
        .then(request => request(axios, basePath));
    },
  };
};

/**
 * UserAccountsApi - object-oriented interface
 * @export
 * @class UserAccountsApi
 * @extends {BaseAPI}
 */
export class UserAccountsApi extends BaseAPI {
  /**
   *
   * @summary Get accountHolders of an account
   * @param {string} userId
   * @param {string} accountId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserAccountsApi
   */
  public async getAccountHolders(userId: string, accountId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<AccountHolder>>> {
    return UserAccountsApiFp(this.configuration)
      .getAccountHolders(userId, accountId, options)
      .then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Get accounts of a user
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserAccountsApi
   */
  public async getAccountsByUserId(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Account>>> {
    return UserAccountsApiFp(this.configuration)
      .getAccountsByUserId(id, options)
      .then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Get all business activities pre-inserted by admin.
   * @param {Page} [page]
   * @param {PageSize} [pageSize]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserAccountsApi
   */
  public async getBusinessActivities(page?: Page, pageSize?: PageSize, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<BusinessActivity>>> {
    return UserAccountsApiFp(this.configuration)
      .getBusinessActivities(page, pageSize, options)
      .then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Get a user
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserAccountsApi
   */
  public async getUserById(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<User>> {
    return UserAccountsApiFp(this.configuration)
      .getUserById(id, options)
      .then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Update business activities of an account holder
   * @param {string} userId
   * @param {string} accountId
   * @param {string} ahId
   * @param {CompanyBusinessActivity} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserAccountsApi
   */
  public async updateBusinessActivities(
    userId: string,
    accountId: string,
    ahId: string,
    body?: CompanyBusinessActivity,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<AccountHolder>> {
    return UserAccountsApiFp(this.configuration)
      .updateBusinessActivities(userId, accountId, ahId, body, options)
      .then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Update company info of an account holder
   * @param {string} userId
   * @param {string} accountId
   * @param {string} ahId
   * @param {CompanyInfo} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserAccountsApi
   */
  public async updateCompanyInfo(
    userId: string,
    accountId: string,
    ahId: string,
    body?: CompanyInfo,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<AccountHolder>> {
    return UserAccountsApiFp(this.configuration)
      .updateCompanyInfo(userId, accountId, ahId, body, options)
      .then(request => request(this.axios, this.basePath));
  }
}
