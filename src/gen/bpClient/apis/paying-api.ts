/* tslint:disable */
/* eslint-disable */
/**
 * BPartners API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: latest
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { BadRequestException } from '../models';
import { CrupdateInvoice } from '../models';
import { InternalServerException } from '../models';
import { Invoice } from '../models';
import { NotAuthorizedException } from '../models';
import { PaymentInitiation } from '../models';
import { PaymentRedirection } from '../models';
import { ResourceNotFoundException } from '../models';
import { TooManyRequestsException } from '../models';
import { Transaction } from '../models';
/**
 * PayingApi - axios parameter creator
 * @export
 */
export const PayingApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Crupdate an invoice
     * @param {CrupdateInvoice} body
     * @param {string} aId Account identifier
     * @param {string} iId Invoice identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    crupdateInvoice: async (body: CrupdateInvoice, aId: string, iId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError('body', 'Required parameter body was null or undefined when calling crupdateInvoice.');
      }
      // verify required parameter 'aId' is not null or undefined
      if (aId === null || aId === undefined) {
        throw new RequiredError('aId', 'Required parameter aId was null or undefined when calling crupdateInvoice.');
      }
      // verify required parameter 'iId' is not null or undefined
      if (iId === null || iId === undefined) {
        throw new RequiredError('iId', 'Required parameter iId was null or undefined when calling crupdateInvoice.');
      }
      const localVarPath = `/accounts/{aId}/invoices/{iId}`
        .replace(`{${'aId'}}`, encodeURIComponent(String(aId)))
        .replace(`{${'iId'}}`, encodeURIComponent(String(iId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required

      localVarHeaderParameter['Content-Type'] = 'application/json';

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      const needsSerialization = typeof body !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : body || '';

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get an invoice
     * @param {string} aId Account identifier
     * @param {string} iId Invoice identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoiceById: async (aId: string, iId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'aId' is not null or undefined
      if (aId === null || aId === undefined) {
        throw new RequiredError('aId', 'Required parameter aId was null or undefined when calling getInvoiceById.');
      }
      // verify required parameter 'iId' is not null or undefined
      if (iId === null || iId === undefined) {
        throw new RequiredError('iId', 'Required parameter iId was null or undefined when calling getInvoiceById.');
      }
      const localVarPath = `/accounts/{aId}/invoices/{iId}`
        .replace(`{${'aId'}}`, encodeURIComponent(String(aId)))
        .replace(`{${'iId'}}`, encodeURIComponent(String(iId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get transactions of an account
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTransactions: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling getTransactions.');
      }
      const localVarPath = `/accounts/{id}/transactions`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Initiate payment processes to an account
     * @param {Array<PaymentInitiation>} body
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    initiatePayments: async (body: Array<PaymentInitiation>, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError('body', 'Required parameter body was null or undefined when calling initiatePayments.');
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling initiatePayments.');
      }
      const localVarPath = `/accounts/{id}/paymentInitiations`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required

      localVarHeaderParameter['Content-Type'] = 'application/json';

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      const needsSerialization = typeof body !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : body || '';

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * PayingApi - functional programming interface
 * @export
 */
export const PayingApiFp = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Crupdate an invoice
     * @param {CrupdateInvoice} body
     * @param {string} aId Account identifier
     * @param {string} iId Invoice identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async crupdateInvoice(
      body: CrupdateInvoice,
      aId: string,
      iId: string,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Invoice>>> {
      const localVarAxiosArgs = await PayingApiAxiosParamCreator(configuration).crupdateInvoice(body, aId, iId, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Get an invoice
     * @param {string} aId Account identifier
     * @param {string} iId Invoice identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getInvoiceById(
      aId: string,
      iId: string,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Invoice>>> {
      const localVarAxiosArgs = await PayingApiAxiosParamCreator(configuration).getInvoiceById(aId, iId, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Get transactions of an account
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getTransactions(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Transaction>>>> {
      const localVarAxiosArgs = await PayingApiAxiosParamCreator(configuration).getTransactions(id, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Initiate payment processes to an account
     * @param {Array<PaymentInitiation>} body
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async initiatePayments(
      body: Array<PaymentInitiation>,
      id: string,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<PaymentRedirection>>>> {
      const localVarAxiosArgs = await PayingApiAxiosParamCreator(configuration).initiatePayments(body, id, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs: AxiosRequestConfig = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * PayingApi - factory interface
 * @export
 */
export const PayingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  return {
    /**
     *
     * @summary Crupdate an invoice
     * @param {CrupdateInvoice} body
     * @param {string} aId Account identifier
     * @param {string} iId Invoice identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async crupdateInvoice(body: CrupdateInvoice, aId: string, iId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Invoice>> {
      return PayingApiFp(configuration)
        .crupdateInvoice(body, aId, iId, options)
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @summary Get an invoice
     * @param {string} aId Account identifier
     * @param {string} iId Invoice identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getInvoiceById(aId: string, iId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Invoice>> {
      return PayingApiFp(configuration)
        .getInvoiceById(aId, iId, options)
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @summary Get transactions of an account
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getTransactions(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Transaction>>> {
      return PayingApiFp(configuration)
        .getTransactions(id, options)
        .then(request => request(axios, basePath));
    },
    /**
     *
     * @summary Initiate payment processes to an account
     * @param {Array<PaymentInitiation>} body
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async initiatePayments(body: Array<PaymentInitiation>, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<PaymentRedirection>>> {
      return PayingApiFp(configuration)
        .initiatePayments(body, id, options)
        .then(request => request(axios, basePath));
    },
  };
};

/**
 * PayingApi - object-oriented interface
 * @export
 * @class PayingApi
 * @extends {BaseAPI}
 */
export class PayingApi extends BaseAPI {
  /**
   *
   * @summary Crupdate an invoice
   * @param {CrupdateInvoice} body
   * @param {string} aId Account identifier
   * @param {string} iId Invoice identifier
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PayingApi
   */
  public async crupdateInvoice(body: CrupdateInvoice, aId: string, iId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Invoice>> {
    return PayingApiFp(this.configuration)
      .crupdateInvoice(body, aId, iId, options)
      .then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Get an invoice
   * @param {string} aId Account identifier
   * @param {string} iId Invoice identifier
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PayingApi
   */
  public async getInvoiceById(aId: string, iId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Invoice>> {
    return PayingApiFp(this.configuration)
      .getInvoiceById(aId, iId, options)
      .then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Get transactions of an account
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PayingApi
   */
  public async getTransactions(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Transaction>>> {
    return PayingApiFp(this.configuration)
      .getTransactions(id, options)
      .then(request => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Initiate payment processes to an account
   * @param {Array<PaymentInitiation>} body
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PayingApi
   */
  public async initiatePayments(body: Array<PaymentInitiation>, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<PaymentRedirection>>> {
    return PayingApiFp(this.configuration)
      .initiatePayments(body, id, options)
      .then(request => request(this.axios, this.basePath));
  }
}
